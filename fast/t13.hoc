// hh model, fixed step, and cvode with threads
// Note: full double precision identity between single and multiple threads
// is obtainable 
// when cvode.use_long_double(1) is invoked
// (avoids different roundoff error due to different summation order
// in N_VWrmsNorm)

{load_file("stdrun.hoc")}

begintemplate Cell
public soma, s, vv, tv, pr
create soma
objref s, this, vv, tv
proc init() {
	vv = new Vector()
	tv = new Vector()
    soma {
	L = 10  diam=100/(PI*L)  insert hh
	s = new IClamp(.5) s.dur=.1+.1*$1 s.amp=.2+.1*$1
	tv.record(&t)
	vv.record(&v(.5))
    }
}
proc pr() {local i
	printf("\n%s\n", this)
	for i=0, tv.size-1 {
		printf("%.15g %.15g\n", tv.x[i], vv.x[i])
	}
}
endtemplate Cell

n = 3
objref cells[n]
for i=0, n-1 cells[i] = new Cell(i)

objref pc
pc = new ParallelContext()
b = execute1("{pc.nthread(3,1)}",0)

{hoc_stdout("temp13")}
{printf("fixed step\n")}
run()
for i=0, n-1 cells[i].pr()
{cvode.use_long_double(1)}
{cvode_active(1)}
{printf("cvode\n")}
run()
for i=0, n-1 cells[i].pr()
{hoc_stdout()}

strdef s
//{system("cmp temp t13.stdout", s)}
//b = b && (strcmp(s, "") == 0)
{load_file("compare.hoc")}
if (strcmp(nrnversion(8), "arm64-Darwin") != 0) { // use_long_double(1) same as double
  b = b && (compare_files("temp13", "t13.stdout", 1e-8) || compare_files("temp13", "t13.stdout.c3", 1e-8) || compare_files("temp13", "t13.stdout.ci", 1e-8) || compare_files("temp13", "t13.stdout.ci.nvhpc", 1e-8))
}

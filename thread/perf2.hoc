load_file("nrngui.hoc")
load_file("stdlib.hoc")
load_file("hhcell.hoc")

ncell = 1000
objref cell[ncell]
for i=0, ncell - 1 {
	cell[i] = new Cell()
	cell[i].icl.amp = i/ncell
	cell[i].position(0, 100*i, 0)
}

usetable_hh = 0
usetable_hhh = 0
objref pc
pc = new ParallelContext()
is_multicore = execute1("pc.nthread()", 0)

tstop = 10
func prun() {local runtime
	if (is_multicore && numarg() > 0) {
		pc.nthread($1, $2)
	}
	pc.set_maxstep(10)
	finitialize(-65)
	runtime=startsw()
	stdinit()
//	pc.psolve(tstop)
	batch_run(tstop, tstop)
	runtime=startsw()-runtime
	return runtime
}

func perun() {
	cvode.cache_efficient($1)
	return prun($2,$3)
}
proc perf() {local r0, r1, nt
	printf("nt\t cache1\n")
	for case(&nt, 1) {
		//printf("%d\t %g\t %g\n", nt, perun(0, nt, 1), perun(1, nt, 1))
		printf("%d\t %g\n", nt, perun(1, nt, 1))
		if (!is_multicore) {break}
	}
}

perf()
